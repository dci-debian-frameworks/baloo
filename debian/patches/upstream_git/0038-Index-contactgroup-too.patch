From 572f20ef063c0e19cc49a932fa3ec293e736c50b Mon Sep 17 00:00:00 2001
From: Montel Laurent <montel@kde.org>
Date: Wed, 2 Apr 2014 14:06:57 +0200
Subject: [PATCH 38/56] Index contactgroup too

---
 src/pim/agent/contactindexer.cpp | 55 +++++++++++++++++++++++++++++++++++-----
 src/pim/agent/contactindexer.h   |  2 ++
 2 files changed, 50 insertions(+), 7 deletions(-)

diff --git a/src/pim/agent/contactindexer.cpp b/src/pim/agent/contactindexer.cpp
index a5a6865..9529676 100644
--- a/src/pim/agent/contactindexer.cpp
+++ b/src/pim/agent/contactindexer.cpp
@@ -23,6 +23,7 @@
 #include "contactindexer.h"
 
 #include <KABC/Addressee>
+#include <KABC/ContactGroup>
 #include <Akonadi/Collection>
 
 ContactIndexer::ContactIndexer(const QString& path):
@@ -42,13 +43,13 @@ QStringList ContactIndexer::mimeTypes() const
     return QStringList() << KABC::Addressee::mimeType();
 }
 
-void ContactIndexer::index(const Akonadi::Item& item)
+bool ContactIndexer::indexContact(const Akonadi::Item& item)
 {
     KABC::Addressee addresse;
     try {
         addresse = item.payload<KABC::Addressee>();
     } catch (const Akonadi::PayloadException&) {
-        return;
+        return false;
     }
 
     Xapian::Document doc;
@@ -67,8 +68,8 @@ void ContactIndexer::index(const Akonadi::Item& item)
         name = addresse.name();
     }
 
-    std::string stdName = name.toStdString();
-    std::string stdNick = addresse.nickName().toStdString();
+    const std::string stdName = name.toStdString();
+    const std::string stdNick = addresse.nickName().toStdString();
     kDebug() << "Indexing" << name << addresse.nickName();
 
     termGen.index_text(stdName);
@@ -89,12 +90,52 @@ void ContactIndexer::index(const Akonadi::Item& item)
     Q_ASSERT_X(item.parentCollection().isValid(), "Baloo::ContactIndexer::index",
                "Item does not have a valid parent collection");
 
-    Akonadi::Entity::Id colId = item.parentCollection().id();
-    QByteArray term = 'C' + QByteArray::number(colId);
+    const Akonadi::Entity::Id colId = item.parentCollection().id();
+    const QByteArray term = 'C' + QByteArray::number(colId);
     doc.add_boolean_term(term.data());
 
     m_db->replace_document(item.id(), doc);
-    // TODO: Contact Groups?
+    return true;
+}
+
+void ContactIndexer::indexContactGroup(const Akonadi::Item& item)
+{
+    KABC::ContactGroup group;
+    try {
+        group = item.payload<KABC::ContactGroup>();
+    } catch (const Akonadi::PayloadException&) {
+        return;
+    }
+
+    Xapian::Document doc;
+    Xapian::TermGenerator termGen;
+    termGen.set_database(*m_db);
+    termGen.set_document(doc);
+
+    const QString name = group.name();
+
+    const std::string stdName = name.toStdString();
+
+    termGen.index_text(stdName);
+
+    termGen.index_text(stdName, 1, "NA");
+    // Parent collection
+    Q_ASSERT_X(item.parentCollection().isValid(), "Baloo::ContactIndexer::index",
+               "Item does not have a valid parent collection");
+
+    const Akonadi::Entity::Id colId = item.parentCollection().id();
+    const QByteArray term = 'C' + QByteArray::number(colId);
+    doc.add_boolean_term(term.data());
+
+    m_db->replace_document(item.id(), doc);
+}
+
+
+void ContactIndexer::index(const Akonadi::Item& item)
+{
+    if (!indexContact(item)) {
+        indexContactGroup(item);
+    }
 }
 
 void ContactIndexer::remove(const Akonadi::Item& item)
diff --git a/src/pim/agent/contactindexer.h b/src/pim/agent/contactindexer.h
index 49dfdeb..fb38ee8 100644
--- a/src/pim/agent/contactindexer.h
+++ b/src/pim/agent/contactindexer.h
@@ -42,6 +42,8 @@ class ContactIndexer: public AbstractIndexer
     void commit();
 
 private:
+    bool indexContact(const Akonadi::Item &item);
+    void indexContactGroup(const Akonadi::Item &item);
     Xapian::WritableDatabase* m_db;
 };
 
-- 
1.9.1

