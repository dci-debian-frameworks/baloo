From 3ad8f77301f25be1ede51bd38116bbb417fc3568 Mon Sep 17 00:00:00 2001
From: Vishesh Handa <me@vhanda.in>
Date: Tue, 1 Apr 2014 15:44:20 +0200
Subject: [PATCH 28/56] FileIndexingJobTest: Test when multiple files fail to
 index

---
 src/file/autotest/fileindexingjob/extractor.cpp    |  4 ++--
 .../fileindexingjob/fileindexingjobtest.cpp        | 26 +++++++++++++++++++++-
 .../autotest/fileindexingjob/fileindexingjobtest.h |  1 +
 3 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/src/file/autotest/fileindexingjob/extractor.cpp b/src/file/autotest/fileindexingjob/extractor.cpp
index 949fc8f..28a27e9 100644
--- a/src/file/autotest/fileindexingjob/extractor.cpp
+++ b/src/file/autotest/fileindexingjob/extractor.cpp
@@ -60,11 +60,11 @@ int main(int argc, char* argv[])
         return 0;
     }
 
-    QString failFile = QString::fromUtf8(arr);
+    QStringList failFiles = QString::fromUtf8(arr).split(",", QString::SkipEmptyParts);
 
     for (int i = 0; i < args->count(); i++) {
         QString fid = args->arg(i);
-        if (fid == failFile) {
+        if (failFiles.contains(fid)) {
             // kill oneself
             raise(SIGKILL);
             return -1;
diff --git a/src/file/autotest/fileindexingjob/fileindexingjobtest.cpp b/src/file/autotest/fileindexingjob/fileindexingjobtest.cpp
index 57482c8..ecb1b42 100644
--- a/src/file/autotest/fileindexingjob/fileindexingjobtest.cpp
+++ b/src/file/autotest/fileindexingjob/fileindexingjobtest.cpp
@@ -39,7 +39,9 @@ void FileIndexingJobTest::init()
 void FileIndexingJobTest::testFileFail()
 {
     QVector<uint> files;
-    files << 1 << 2 << 3 << 4 << 5 << 6;
+    for (int i = 0; i<40; i++) {
+        files << i;
+    }
 
     putenv("BALOO_EXTRACTOR_FAIL_FILE=5");
     FileIndexingJob* job = new FileIndexingJob(files);
@@ -52,6 +54,28 @@ void FileIndexingJobTest::testFileFail()
     QCOMPARE(spy.at(0).first().toUInt(), (uint)5);
 }
 
+void FileIndexingJobTest::testMultiFileFail()
+{
+    QVector<uint> files;
+    for (int i = 0; i<40; i++) {
+        files << i;
+    }
+
+    putenv("BALOO_EXTRACTOR_FAIL_FILE=5,18,19");
+    FileIndexingJob* job = new FileIndexingJob(files);
+
+    QSignalSpy spy(job, SIGNAL(indexingFailed(uint)));
+    QVERIFY(job->exec());
+
+    QCOMPARE(spy.count(), 3);
+    QCOMPARE(spy.at(0).size(), 1);
+    QCOMPARE(spy.at(0).first().toUInt(), (uint)5);
+    QCOMPARE(spy.at(1).size(), 1);
+    QCOMPARE(spy.at(1).first().toUInt(), (uint)18);
+    QCOMPARE(spy.at(2).size(), 1);
+    QCOMPARE(spy.at(2).first().toUInt(), (uint)19);
+}
+
 void FileIndexingJobTest::testNormalExecution()
 {
     QVector<uint> files;
diff --git a/src/file/autotest/fileindexingjob/fileindexingjobtest.h b/src/file/autotest/fileindexingjob/fileindexingjobtest.h
index 100d300..3d84c7a 100644
--- a/src/file/autotest/fileindexingjob/fileindexingjobtest.h
+++ b/src/file/autotest/fileindexingjob/fileindexingjobtest.h
@@ -34,6 +34,7 @@ private Q_SLOTS:
 
     void testNormalExecution();
     void testFileFail();
+    void testMultiFileFail();
 };
 }
 
-- 
1.9.1

