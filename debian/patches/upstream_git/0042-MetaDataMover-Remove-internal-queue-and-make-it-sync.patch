From 3b5cb08a5450cc01e7700697e46262bf80847324 Mon Sep 17 00:00:00 2001
From: Nitul Datt <nitul1991@gmail.com>
Date: Wed, 2 Apr 2014 13:02:45 +0200
Subject: [PATCH 42/48] MetaDataMover: Remove internal queue and make it sync

The MetaDataMover is fast enough that it does not need to be
asynchronous. It's mostly just executing a single SQL query, and even in
the cases that it does block, that's okay. All other operations will
continue after that.

Also, it was never really asynchronous it just queued the operation and
executed it later in the same thread.

REVIEW: 116919
BUG: 329039
---
 src/file/CMakeLists.txt                 |  1 -
 src/file/autotest/metadatamovertest.cpp |  4 --
 src/file/metadatamover.cpp              | 75 ++++-----------------------------
 src/file/metadatamover.h                | 21 +--------
 src/file/updaterequest.cpp              | 27 ------------
 src/file/updaterequest.h                | 67 -----------------------------
 6 files changed, 9 insertions(+), 186 deletions(-)
 delete mode 100644 src/file/updaterequest.cpp
 delete mode 100644 src/file/updaterequest.h

diff --git a/src/file/CMakeLists.txt b/src/file/CMakeLists.txt
index e33c7ca..49a34dd 100644
--- a/src/file/CMakeLists.txt
+++ b/src/file/CMakeLists.txt
@@ -6,7 +6,6 @@ add_subdirectory(search)
 set(file_SRCS
     # Filewatch
     filewatch.cpp
-    updaterequest.cpp
     activefilequeue.cpp
     metadatamover.cpp
     database.cpp
diff --git a/src/file/autotest/metadatamovertest.cpp b/src/file/autotest/metadatamovertest.cpp
index 4a0961b..e3920c0 100644
--- a/src/file/autotest/metadatamovertest.cpp
+++ b/src/file/autotest/metadatamovertest.cpp
@@ -72,10 +72,6 @@ void MetadataMoverTest::testRemoveFile()
     QSignalSpy spy(&mover, SIGNAL(fileRemoved(int)));
     mover.removeFileMetadata(url);
 
-    QEventLoop loop;
-    connect(&mover, SIGNAL(fileRemoved(int)), &loop, SLOT(quit()));
-    loop.exec();
-
     QCOMPARE(spy.size(), 1);
     QCOMPARE(spy.at(0).size(), 1);
     QCOMPARE(spy.at(0).first().toUInt(), fid);
diff --git a/src/file/metadatamover.cpp b/src/file/metadatamover.cpp
index 14d454a..9503b30 100644
--- a/src/file/metadatamover.cpp
+++ b/src/file/metadatamover.cpp
@@ -34,13 +34,7 @@ using namespace Baloo;
 MetadataMover::MetadataMover(Database* db, QObject* parent)
     : QObject(parent)
     , m_db(db)
-    , m_queueMutex(QMutex::Recursive)
 {
-    // setup the main update queue timer
-    m_queueTimer = new QTimer(this);
-    connect(m_queueTimer, SIGNAL(timeout()),
-            this, SLOT(slotWorkUpdateQueue()),
-            Qt::DirectConnection);
 }
 
 
@@ -55,16 +49,14 @@ void MetadataMover::moveFileMetadata(const QString& from, const QString& to)
     Q_ASSERT(!from.isEmpty() && from != "/");
     Q_ASSERT(!to.isEmpty() && to != "/");
 
-    QMutexLocker lock(&m_queueMutex);
+    // We do NOT get deleted messages for overwritten files! Thus, we
+    // have to remove all metadata for overwritten files first.
+    removeMetadata(to);
 
-    UpdateRequest req(from, to);
-    if (!m_updateQueue.contains(req))
-        m_updateQueue.enqueue(req);
-
-    QTimer::singleShot(0, this, SLOT(slotStartUpdateTimer()));
+    // and finally update the old statements
+    updateMetadata(from, to);
 }
 
-
 void MetadataMover::removeFileMetadata(const QString& file)
 {
     Q_ASSERT(!file.isEmpty() && file != "/");
@@ -75,55 +67,9 @@ void MetadataMover::removeFileMetadata(const QString& file)
 void MetadataMover::removeFileMetadata(const QStringList& files)
 {
     kDebug() << files;
-    QMutexLocker lock(&m_queueMutex);
 
     Q_FOREACH (const QString& file, files) {
-        UpdateRequest req(file);
-        if (!m_updateQueue.contains(req))
-            m_updateQueue.enqueue(req);
-    }
-
-    QTimer::singleShot(0, this, SLOT(slotStartUpdateTimer()));
-}
-
-
-void MetadataMover::slotWorkUpdateQueue()
-{
-    // lock for initial iteration
-    QMutexLocker lock(&m_queueMutex);
-
-    // work the queue
-    if (!m_updateQueue.isEmpty()) {
-        UpdateRequest updateRequest = m_updateQueue.dequeue();
-
-        // unlock after queue utilization
-        lock.unlock();
-
-//        kDebug() << "========================= handling" << updateRequest.source() << updateRequest.target();
-
-        // an empty second url means deletion
-        if (updateRequest.target().isEmpty()) {
-            removeMetadata(updateRequest.source());
-        } else {
-            const QString from = updateRequest.source();
-            const QString to = updateRequest.target();
-
-            // We do NOT get deleted messages for overwritten files! Thus, we
-            // have to remove all metadata for overwritten files first.
-            removeMetadata(to);
-
-            // and finally update the old statements
-            updateMetadata(from, to);
-        }
-
-//        kDebug() << "========================= done with" << updateRequest.source() << updateRequest.target();
-    } else {
-        //kDebug() << "All update requests handled. Stopping timer.";
-
-        m_db->sqlDatabase().commit();
-        m_db->sqlDatabase().transaction();
-
-        m_queueTimer->stop();
+        removeMetadata(file);
     }
 }
 
@@ -210,14 +156,9 @@ void MetadataMover::updateMetadata(const QString& from, const QString& to)
     if (!query.exec(queryStr)) {
         kError() << "Big query failed:" << query.lastError().text();
     }
-}
 
-// start the timer in the update thread
-void MetadataMover::slotStartUpdateTimer()
-{
-    if (!m_queueTimer->isActive()) {
-        m_queueTimer->start();
-    }
+    m_db->sqlDatabase().commit();
+    m_db->sqlDatabase().transaction();
 }
 
 #include "metadatamover.moc"
diff --git a/src/file/metadatamover.h b/src/file/metadatamover.h
index d7975ec..826f62b 100644
--- a/src/file/metadatamover.h
+++ b/src/file/metadatamover.h
@@ -19,12 +19,8 @@
 #ifndef _METADATA_MOVER_H_
 #define _METADATA_MOVER_H_
 
-#include <QMutex>
-#include <QQueue>
+#include <QObject>
 
-#include "updaterequest.h"
-
-class QTimer;
 class Database;
 
 namespace Baloo
@@ -59,14 +55,6 @@ Q_SIGNALS:
      */
     void fileRemoved(int id);
 
-private Q_SLOTS:
-    void slotWorkUpdateQueue();
-
-    /**
-     * Start the update queue from the main thread.
-     */
-    void slotStartUpdateTimer();
-
 private:
     /**
      * Remove the metadata for file \p url
@@ -80,13 +68,6 @@ private:
     void updateMetadata(const QString& from, const QString& to);
 
     Database* m_db;
-
-    // if the second url is empty, just delete the metadata
-    QQueue<UpdateRequest> m_updateQueue;
-
-    QMutex m_queueMutex;
-
-    QTimer* m_queueTimer;
 };
 }
 
diff --git a/src/file/updaterequest.cpp b/src/file/updaterequest.cpp
deleted file mode 100644
index 63dd9c5..0000000
--- a/src/file/updaterequest.cpp
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
-   This file is part of the Nepomuk KDE project.
-   Copyright (C) 2009 Sebastian Trueg <trueg@kde.org>
-
-   This library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) version 3, or any
-   later version accepted by the membership of KDE e.V. (or its
-   successor approved by the membership of KDE e.V.), which shall
-   act as a proxy defined in Section 6 of version 3 of the license.
-
-   This library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with this library.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#include "updaterequest.h"
-
-uint Baloo::qHash(const UpdateRequest& req)
-{
-    return qHash(req.source()) ^ qHash(req.target());
-}
diff --git a/src/file/updaterequest.h b/src/file/updaterequest.h
deleted file mode 100644
index 1844dff..0000000
--- a/src/file/updaterequest.h
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
-   This file is part of the Nepomuk KDE project.
-   Copyright (C) 2009 Sebastian Trueg <trueg@kde.org>
-
-   This library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) version 3, or any
-   later version accepted by the membership of KDE e.V. (or its
-   successor approved by the membership of KDE e.V.), which shall
-   act as a proxy defined in Section 6 of version 3 of the license.
-
-   This library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with this library.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#ifndef _UPDATE_REQUEST_H_
-#define _UPDATE_REQUEST_H_
-
-#include <QString>
-#include <QDateTime>
-
-namespace Baloo
-{
-/**
- * One update request with a timestamp.
- */
-class UpdateRequest
-{
-public:
-    UpdateRequest(const QString& s = QString(),
-                  const QString& t = QString())
-        : m_source(s),
-          m_target(t) {
-        m_timestamp = QDateTime::currentDateTime();
-    }
-
-    /// here the timestamp is ignored deliberately
-    bool operator==(const UpdateRequest& other) const {
-        return m_source == other.m_source && m_target == other.m_target;
-    }
-
-    QDateTime timestamp() const {
-        return m_timestamp;
-    }
-    QString source() const {
-        return m_source;
-    }
-    QString target() const {
-        return m_target;
-    }
-
-private:
-    QString m_source;
-    QString m_target;
-    QDateTime m_timestamp;
-};
-
-uint qHash(const UpdateRequest& req);
-}
-
-#endif
-- 
1.9.1

