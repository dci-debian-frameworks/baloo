From d6e8b93f87932670abff3940273e442ef9846e50 Mon Sep 17 00:00:00 2001
From: Vishesh Handa <me@vhanda.in>
Date: Wed, 2 Apr 2014 14:39:03 +0200
Subject: [PATCH 43/48] XapianDatabase: Make the commit function blocking

The commit function now keeps trying to obtain the write lock, each time
it fails it sleep for a short interval. Calling a slot at a later point
and using a timer is not always practical.

Additionally since everyone is using the XapianDatabase class, everyone
will hold the lock for the minimum amount of time.
---
 src/file/commitqueue.cpp       |   5 +-
 src/file/extractor/app.cpp     |   7 +--
 src/file/extractor/app.h       |   1 -
 src/file/lib/filemodifyjob.cpp |  11 ++--
 src/file/lib/filemodifyjob.h   |   1 -
 src/xapian/xapiandatabase.cpp  | 121 +++++++++++++++++++++++------------------
 src/xapian/xapiandatabase.h    |  20 +++----
 7 files changed, 83 insertions(+), 83 deletions(-)

diff --git a/src/file/commitqueue.cpp b/src/file/commitqueue.cpp
index b59bb5d..2a32982 100644
--- a/src/file/commitqueue.cpp
+++ b/src/file/commitqueue.cpp
@@ -40,9 +40,6 @@ Baloo::CommitQueue::CommitQueue(Database* db, QObject* parent)
     m_largeTimer.setSingleShot(true);
     m_largeTimer.setInterval(10000);
     connect(&m_largeTimer, SIGNAL(timeout()), this, SLOT(commit()));
-
-    connect(m_db->xapianDatabase(), SIGNAL(committed()),
-            this, SIGNAL(committed()));
 }
 
 Baloo::CommitQueue::~CommitQueue()
@@ -89,4 +86,6 @@ void Baloo::CommitQueue::commit()
 
     m_smallTimer.stop();
     m_largeTimer.stop();
+
+    Q_EMIT committed();
 }
diff --git a/src/file/extractor/app.cpp b/src/file/extractor/app.cpp
index 83ee293..12646d6 100644
--- a/src/file/extractor/app.cpp
+++ b/src/file/extractor/app.cpp
@@ -61,9 +61,6 @@ App::App(QObject* parent)
         return;
     }
 
-    connect(m_db.xapianDatabase(), SIGNAL(committed()),
-            this, SLOT(slotCommitted()));
-
     m_bData = args->isSet("bdata");
     m_debugEnabled = args->isSet("debug");
 
@@ -206,10 +203,8 @@ void App::saveChanges()
     }
 
     m_db.xapianDatabase()->commit();
-}
+    // vHanda: Write the Sqlite db?
 
-void App::slotCommitted()
-{
     m_results.clear();
     m_termCount = 0;
     m_updatedFiles.clear();
diff --git a/src/file/extractor/app.h b/src/file/extractor/app.h
index 6f89a80..889db1d 100644
--- a/src/file/extractor/app.h
+++ b/src/file/extractor/app.h
@@ -45,7 +45,6 @@ public:
 private Q_SLOTS:
     void processNextUrl();
     void saveChanges();
-    void slotCommitted();
 
 Q_SIGNALS:
     void saved();
diff --git a/src/file/lib/filemodifyjob.cpp b/src/file/lib/filemodifyjob.cpp
index 1e957e9..a5abf40 100644
--- a/src/file/lib/filemodifyjob.cpp
+++ b/src/file/lib/filemodifyjob.cpp
@@ -53,7 +53,6 @@ public:
     bool tagsSet;
 
     XapianDatabase* m_db;
-    QStringList m_updatedFiles;
 
     Private()
         : rating(0)
@@ -94,6 +93,8 @@ void FileModifyJob::start()
 
 void FileModifyJob::doStart()
 {
+    QStringList updatedFiles;
+
     Q_FOREACH (const File& file, d->files) {
         FileMapping fileMap(file.url());
         if (!file.id().isEmpty()) {
@@ -121,7 +122,7 @@ void FileModifyJob::doStart()
             return;
         }
 
-        d->m_updatedFiles << fileMap.url();
+        updatedFiles << fileMap.url();
         const QString furl = fileMap.url();
 
         if (d->ratingSet) {
@@ -162,13 +163,9 @@ void FileModifyJob::doStart()
         }
 
         d->m_db->replaceDocument(fileMap.id(), doc.doc());
-        connect(d->m_db, SIGNAL(committed()), this, SLOT(slotCommitted()));
         d->m_db->commit();
     }
-}
 
-void FileModifyJob::slotCommitted()
-{
     // Notify the world?
     QDBusMessage message = QDBusMessage::createSignal(QLatin1String("/files"),
                                                       QLatin1String("org.kde"),
@@ -176,7 +173,7 @@ void FileModifyJob::slotCommitted()
 
     QVariantList vl;
     vl.reserve(1);
-    vl << QVariant(d->m_updatedFiles);
+    vl << QVariant(updatedFiles);
     message.setArguments(vl);
 
     QDBusConnection::sessionBus().send(message);
diff --git a/src/file/lib/filemodifyjob.h b/src/file/lib/filemodifyjob.h
index 38ccdea..cb3c37f 100644
--- a/src/file/lib/filemodifyjob.h
+++ b/src/file/lib/filemodifyjob.h
@@ -49,7 +49,6 @@ public:
 
 private Q_SLOTS:
     void doStart();
-    void slotCommitted();
 
 private:
     class Private;
diff --git a/src/xapian/xapiandatabase.cpp b/src/xapian/xapiandatabase.cpp
index d139ea7..5c63c47 100644
--- a/src/xapian/xapiandatabase.cpp
+++ b/src/xapian/xapiandatabase.cpp
@@ -1,5 +1,4 @@
 /*
- * <one line to give the library's name and an idea of what it does.>
  * Copyright (C) 2014  Vishesh Handa <me@vhanda.in>
  *
  * This library is free software; you can redistribute it and/or
@@ -26,27 +25,32 @@
 #include <QDir>
 
 #include <malloc.h>
+#include <unistd.h>
 
 using namespace Baloo;
 
-XapianDatabase::XapianDatabase(const QString& path)
-    : QObject()
-    , m_db(0)
+XapianDatabase::XapianDatabase(const QString& path, bool writeOnly)
+    : m_db(0)
 {
     QDir().mkpath(path);
     m_path = path.toUtf8().constData();
 
-    try {
-        Xapian::WritableDatabase(m_path, Xapian::DB_CREATE_OR_OPEN);
-        m_db = new Xapian::Database(m_path);
+    if (!writeOnly) {
+        try {
+            createWritableDb();
+            m_db = new Xapian::Database(m_path);
+        }
+        catch (const Xapian::DatabaseError& err) {
+            kError() << "Serious Error: " << err.get_error_string();
+            kError() << err.get_msg().c_str() << err.get_context().c_str() << err.get_description().c_str();
+        }
+
+        // Possible errors - DatabaseLock error
+        // Corrupt and InvalidID error
     }
-    catch (const Xapian::DatabaseError& err) {
-        kError() << "Serious Error: " << err.get_error_string();
-        kError() << err.get_msg().c_str() << err.get_context().c_str() << err.get_description().c_str();
+    else {
+        m_wDb = createWritableDb();
     }
-
-    // Possible errors - DatabaseLock error
-    // Corrupt and InvalidID error
 }
 
 void XapianDatabase::replaceDocument(uint id, const Xapian::Document& doc)
@@ -62,56 +66,33 @@ void XapianDatabase::deleteDocument(uint id)
 void XapianDatabase::commit()
 {
     if (m_docsToAdd.isEmpty() && m_docsToRemove.isEmpty()) {
-        Q_EMIT committed();
         return;
     }
 
-    try {
-        Xapian::WritableDatabase wdb(m_path, Xapian::DB_CREATE_OR_OPEN);
+    Xapian::WritableDatabase wdb = createWritableDb();
 
-        kDebug() << "Adding:" << m_docsToAdd.size() << "docs";
-        Q_FOREACH (const DocIdPair& doc, m_docsToAdd) {
-            wdb.replace_document(doc.first, doc.second);
-        }
+    kDebug() << "Adding:" << m_docsToAdd.size() << "docs";
+    Q_FOREACH (const DocIdPair& doc, m_docsToAdd) {
+        wdb.replace_document(doc.first, doc.second);
+    }
 
-        kDebug() << "Removing:" << m_docsToRemove.size() << "docs";
-        Q_FOREACH (Xapian::docid id, m_docsToRemove) {
-            try {
-                wdb.delete_document(id);
-            }
-            catch (const Xapian::DocNotFoundError&) {
-            }
+    kDebug() << "Removing:" << m_docsToRemove.size() << "docs";
+    Q_FOREACH (Xapian::docid id, m_docsToRemove) {
+        try {
+            wdb.delete_document(id);
         }
+        catch (const Xapian::DocNotFoundError&) {
+        }
+    }
 
-        wdb.commit();
-        m_db->reopen();
-        kDebug() << "Xapian Committed";
-
-        m_docsToAdd.clear();
-        m_docsToRemove.clear();
-
-        malloc_trim(0);
+    wdb.commit();
+    m_db->reopen();
+    kDebug() << "Xapian Committed";
 
-        Q_EMIT committed();
-    }
-    catch (const Xapian::DatabaseLockError& err) {
-        kError() << err.get_msg().c_str();
-        retryCommit();
-    }
-    catch (const Xapian::DatabaseModifiedError& err) {
-        kError() << err.get_msg().c_str();
-        kError() << "Commit failed, retrying in another 200 msecs";
-        retryCommit();
-    }
-    catch (const Xapian::DatabaseError& err) {
-        kError() << err.get_msg().c_str();
-        retryCommit();
-    }
-}
+    m_docsToAdd.clear();
+    m_docsToRemove.clear();
 
-void XapianDatabase::retryCommit()
-{
-    QTimer::singleShot(200, this, SLOT(commit()));
+    malloc_trim(0);
 }
 
 XapianDocument XapianDatabase::document(uint id)
@@ -129,5 +110,37 @@ XapianDocument XapianDatabase::document(uint id)
     }
 }
 
+Xapian::WritableDatabase XapianDatabase::createWritableDb()
+{
+    // We need to keep sleeping for a required amount, until we reach
+    // a threshold. That's when we decide to abort?
+    for (int i = 1; i <= 20; i++) {
+        try {
+            Xapian::WritableDatabase wdb(m_path, Xapian::DB_CREATE_OR_OPEN);
+            return wdb;
+        }
+        catch (const Xapian::DatabaseLockError&) {
+            usleep(i * 50 * 1000);
+        }
+        catch (const Xapian::DatabaseModifiedError&) {
+            usleep(i * 50 * 1000);
+        }
+        catch (const Xapian::DatabaseCreateError& err) {
+            kDebug() << err.get_error_string();
+            return Xapian::WritableDatabase();
+        }
+        catch (const Xapian::DatabaseCorruptError& err) {
+            kError() << "Database Corrupted - What did you do?";
+            kError() << err.get_error_string();
+            return Xapian::WritableDatabase();
+        }
+        catch (...) {
+            kError() << "Bananana Error";
+            return Xapian::WritableDatabase();
+        }
+    }
 
+    kError() << "Could not obtain lock for Xapian Database. This is bad";
+    return Xapian::WritableDatabase();
+}
 
diff --git a/src/xapian/xapiandatabase.h b/src/xapian/xapiandatabase.h
index d982761..430bee6 100644
--- a/src/xapian/xapiandatabase.h
+++ b/src/xapian/xapiandatabase.h
@@ -1,5 +1,4 @@
 /*
- * <one line to give the library's name and an idea of what it does.>
  * Copyright (C) 2014  Vishesh Handa <me@vhanda.in>
  *
  * This library is free software; you can redistribute it and/or
@@ -25,7 +24,6 @@
 #include "xapian_export.h"
 
 #include <QString>
-#include <QObject>
 #include <QPair>
 #include <QVector>
 
@@ -33,13 +31,16 @@ namespace Baloo {
 
 class XapianDocument;
 
-class BALOO_XAPIAN_EXPORT XapianDatabase : public QObject
+class BALOO_XAPIAN_EXPORT XapianDatabase
 {
-    Q_OBJECT
 public:
-    XapianDatabase(const QString& path);
+    /**
+     * Create the Xapian db at path \p path. The parameter \p
+     * writeOnly locks the database as long as this object is
+     * valid
+     */
+    XapianDatabase(const QString& path, bool writeOnly = false);
 
-public Q_SLOTS:
     void replaceDocument(uint id, const Xapian::Document& doc);
     void deleteDocument(uint id);
 
@@ -50,7 +51,6 @@ public Q_SLOTS:
      */
     void commit();
 
-public:
     XapianDocument document(uint id);
 
     /**
@@ -63,11 +63,9 @@ public:
         return m_db;
     }
 
-Q_SIGNALS:
-    void committed();
-
 private:
     Xapian::Database* m_db;
+    Xapian::WritableDatabase m_wDb;
 
     typedef QPair<Xapian::docid, Xapian::Document> DocIdPair;
     QVector<DocIdPair> m_docsToAdd;
@@ -75,7 +73,7 @@ private:
 
     std::string m_path;
 
-    void retryCommit();
+    Xapian::WritableDatabase createWritableDb();
 };
 
 }
-- 
1.9.1

